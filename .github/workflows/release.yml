name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  actions: read

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'Batchbrake/Batchbrake.csproj'
  
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        run: |
          gh release create ${{ steps.get_version.outputs.tag }} \
            --title "Batchbrake v${{ steps.get_version.outputs.version }}" \
            --draft \
            --notes "# Batchbrake v${{ steps.get_version.outputs.version }}
            
            ## What's New
            - 
            
            ## Features
            - Batch video conversion with HandBrakeCLI
            - Drag & drop interface
            - 90+ built-in presets plus custom preset support
            - Parallel processing capabilities
            - Windows support (x64, x86, ARM64)
            
            ## Installation
            
            ### Windows
            - Download the appropriate version for your system:
              - \`Batchbrake-Windows-win-x64.zip\` for 64-bit systems
              - \`Batchbrake-Windows-win-x86.zip\` for 32-bit systems  
              - \`Batchbrake-Windows-win-arm64.zip\` for ARM64 systems
            - Extract and run \`Batchbrake.exe\`
            - Ensure HandBrakeCLI is installed
            
            ## Requirements
            - HandBrakeCLI must be installed separately
            - FFmpeg (optional) for enhanced metadata extraction
            
            ## Checksums
            See checksums.txt for SHA256 hashes of all release files."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: create-release
    runs-on: windows-latest
    strategy:
      matrix:
        runtime: [win-x64, win-x86, win-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build and Publish
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} `
            -c Release `
            -r ${{ matrix.runtime }} `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:EnableCompressionInSingleFile=true `
            -p:PublishTrimmed=false `
            -p:Version=${{ needs.create-release.outputs.version }} `
            -o ./publish/${{ matrix.runtime }}
            
      - name: Create Archive
        run: |
          cd publish/${{ matrix.runtime }}
          Compress-Archive -Path * -DestinationPath ../../Batchbrake-Windows-${{ matrix.runtime }}.zip
          
      - name: Calculate SHA256
        run: |
          $hash = Get-FileHash -Path Batchbrake-Windows-${{ matrix.runtime }}.zip -Algorithm SHA256
          "$($hash.Hash)  Batchbrake-Windows-${{ matrix.runtime }}.zip" | Out-File -FilePath checksums-windows-${{ matrix.runtime }}.txt
          
      - name: Upload Release Asset
        run: |
          gh release upload ${{ needs.create-release.outputs.tag }} Batchbrake-Windows-${{ matrix.runtime }}.zip --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Upload Checksums
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ matrix.runtime }}
          path: checksums-windows-${{ matrix.runtime }}.txt


  finalize-release:
    needs: [create-release, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all checksums
        uses: actions/download-artifact@v4
        with:
          pattern: checksums-*
          merge-multiple: true
          
      - name: Combine checksums
        run: |
          cat checksums-*.txt > checksums.txt
          echo "SHA256 Checksums for all release files:" | cat - checksums.txt > temp && mv temp checksums.txt
          
      - name: Upload combined checksums
        run: |
          gh release upload ${{ needs.create-release.outputs.tag }} checksums.txt --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'Batchbrake/Batchbrake.csproj'
  
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Batchbrake v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            # Batchbrake v${{ steps.get_version.outputs.version }}
            
            ## What's New
            - 
            
            ## Features
            - Batch video conversion with HandBrakeCLI
            - Drag & drop interface
            - 90+ built-in presets plus custom preset support
            - Parallel processing capabilities
            - Cross-platform support
            
            ## Installation
            
            ### Windows
            - Download `Batchbrake-Windows-x64.zip`
            - Extract and run `Batchbrake.exe`
            - Ensure HandBrakeCLI is installed
            
            ### macOS
            - Download `Batchbrake-macOS-x64.tar.gz` (Intel) or `Batchbrake-macOS-arm64.tar.gz` (Apple Silicon)
            - Extract and move to Applications folder
            - May need to allow in System Preferences â†’ Security & Privacy
            
            ### Linux
            - Download `Batchbrake-Linux-x64.tar.gz`
            - Extract and run `./Batchbrake`
            - Or use the AppImage: `chmod +x Batchbrake-Linux-x64.AppImage && ./Batchbrake-Linux-x64.AppImage`
            
            ## Requirements
            - HandBrakeCLI must be installed separately
            - FFmpeg (optional) for enhanced metadata extraction
            
            ## Checksums
            See checksums.txt for SHA256 hashes of all release files.

  build-windows:
    needs: create-release
    runs-on: windows-latest
    strategy:
      matrix:
        runtime: [win-x64, win-x86, win-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build and Publish
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} `
            -c Release `
            -r ${{ matrix.runtime }} `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:EnableCompressionInSingleFile=true `
            -p:PublishTrimmed=false `
            -p:Version=${{ needs.create-release.outputs.version }} `
            -o ./publish/${{ matrix.runtime }}
            
      - name: Create Archive
        run: |
          cd publish/${{ matrix.runtime }}
          Compress-Archive -Path * -DestinationPath ../../Batchbrake-Windows-${{ matrix.runtime }}.zip
          
      - name: Calculate SHA256
        run: |
          $hash = Get-FileHash -Path Batchbrake-Windows-${{ matrix.runtime }}.zip -Algorithm SHA256
          "$($hash.Hash)  Batchbrake-Windows-${{ matrix.runtime }}.zip" | Out-File -FilePath checksums-windows-${{ matrix.runtime }}.txt
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Batchbrake-Windows-${{ matrix.runtime }}.zip
          asset_name: Batchbrake-Windows-${{ matrix.runtime }}.zip
          asset_content_type: application/zip
          
      - name: Upload Checksums
        uses: actions/upload-artifact@v3
        with:
          name: checksums
          path: checksums-windows-${{ matrix.runtime }}.txt

  build-macos:
    needs: create-release
    runs-on: macos-latest
    strategy:
      matrix:
        runtime: [osx-x64, osx-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build and Publish
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r ${{ matrix.runtime }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -p:PublishTrimmed=false \
            -p:Version=${{ needs.create-release.outputs.version }} \
            -o ./publish/${{ matrix.runtime }}
            
      - name: Create macOS App Bundle
        run: |
          mkdir -p Batchbrake.app/Contents/MacOS
          mkdir -p Batchbrake.app/Contents/Resources
          cp -r publish/${{ matrix.runtime }}/* Batchbrake.app/Contents/MacOS/
          
          # Create Info.plist
          cat > Batchbrake.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>Batchbrake</string>
              <key>CFBundleIdentifier</key>
              <string>com.batchbrake.app</string>
              <key>CFBundleName</key>
              <string>Batchbrake</string>
              <key>CFBundleVersion</key>
              <string>${{ needs.create-release.outputs.version }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ needs.create-release.outputs.version }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.15</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF
          
      - name: Create Archive
        run: |
          tar -czf Batchbrake-macOS-${{ matrix.runtime }}.tar.gz Batchbrake.app
          
      - name: Calculate SHA256
        run: |
          shasum -a 256 Batchbrake-macOS-${{ matrix.runtime }}.tar.gz > checksums-macos-${{ matrix.runtime }}.txt
          
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Batchbrake-macOS-${{ matrix.runtime }}.tar.gz
          asset_name: Batchbrake-macOS-${{ matrix.runtime }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Checksums
        uses: actions/upload-artifact@v3
        with:
          name: checksums
          path: checksums-macos-${{ matrix.runtime }}.txt

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [linux-x64, linux-arm, linux-arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Install dependencies for AppImage
        if: matrix.runtime == 'linux-x64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
      - name: Restore dependencies
        run: dotnet restore
        
      - name: Build and Publish
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            -c Release \
            -r ${{ matrix.runtime }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:EnableCompressionInSingleFile=true \
            -p:PublishTrimmed=false \
            -p:Version=${{ needs.create-release.outputs.version }} \
            -o ./publish/${{ matrix.runtime }}
            
      - name: Create Standard Archive
        run: |
          cd publish/${{ matrix.runtime }}
          tar -czf ../../Batchbrake-Linux-${{ matrix.runtime }}.tar.gz *
          cd ../..
          
      - name: Create AppImage (x64 only)
        if: matrix.runtime == 'linux-x64'
        run: |
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy application
          cp -r publish/${{ matrix.runtime }}/* AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/batchbrake.desktop << EOF
          [Desktop Entry]
          Name=Batchbrake
          Exec=Batchbrake
          Icon=batchbrake
          Type=Application
          Categories=AudioVideo;Video;
          Comment=Batch video converter using HandBrake
          EOF
          
          # Create a simple icon (you should replace this with actual icon)
          echo '<?xml version="1.0"?><svg xmlns="http://www.w3.org/2000/svg" width="256" height="256"><rect width="256" height="256" fill="#4CAF50"/><text x="128" y="128" font-size="120" text-anchor="middle" dy=".3em" fill="white">B</text></svg>' > AppDir/usr/share/icons/hicolor/256x256/apps/batchbrake.svg
          
          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "${HERE}/usr/bin/Batchbrake" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # Build AppImage
          ./appimagetool-x86_64.AppImage AppDir Batchbrake-Linux-x64.AppImage
          
      - name: Calculate SHA256
        run: |
          sha256sum Batchbrake-Linux-${{ matrix.runtime }}.tar.gz > checksums-linux-${{ matrix.runtime }}.txt
          if [ -f "Batchbrake-Linux-x64.AppImage" ]; then
            sha256sum Batchbrake-Linux-x64.AppImage >> checksums-linux-${{ matrix.runtime }}.txt
          fi
          
      - name: Upload Release Asset (Archive)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Batchbrake-Linux-${{ matrix.runtime }}.tar.gz
          asset_name: Batchbrake-Linux-${{ matrix.runtime }}.tar.gz
          asset_content_type: application/gzip
          
      - name: Upload Release Asset (AppImage)
        if: matrix.runtime == 'linux-x64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./Batchbrake-Linux-x64.AppImage
          asset_name: Batchbrake-Linux-x64.AppImage
          asset_content_type: application/octet-stream
          
      - name: Upload Checksums
        uses: actions/upload-artifact@v3
        with:
          name: checksums
          path: checksums-linux-${{ matrix.runtime }}.txt

  finalize-release:
    needs: [create-release, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all checksums
        uses: actions/download-artifact@v3
        with:
          name: checksums
          
      - name: Combine checksums
        run: |
          cat checksums-*.txt > checksums.txt
          echo "SHA256 Checksums for all release files:" | cat - checksums.txt > temp && mv temp checksums.txt
          
      - name: Upload combined checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain